name: Docker Build and Test

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'docker-entrypoint.sh'
      - '.dockerignore'
      - 'requirements/**'
      - 'setup.py'
      - '.github/workflows/docker-build-test.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'docker-entrypoint.sh'
      - '.dockerignore'
      - 'requirements/**'
      - 'setup.py'
      - '.github/workflows/docker-build-test.yml'
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: runtime
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        tags: |
          opencompass:latest
          opencompass:py${{ matrix.python-version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        load: true

    - name: Test Docker image
      run: |
        # Test that the image runs
        docker run --rm opencompass:latest help
        
        # Test Python import
        docker run --rm opencompass:latest python -c "import opencompass; print('OpenCompass imported successfully')"
        
        # Test CLI
        docker run --rm opencompass:latest opencompass --help
        
        # Test with a simple evaluation (dry run)
        docker run --rm opencompass:latest python -c "
        from opencompass.registry import MODELS, DATASETS
        print(f'Available models: {len(MODELS)}')
        print(f'Available datasets: {len(DATASETS)}')
        "

    - name: Test Docker Compose
      run: |
        # Test docker-compose configuration
        docker-compose config
        
        # Test starting services
        docker-compose up -d opencompass
        sleep 5
        
        # Run a simple command
        docker-compose exec -T opencompass python -c "print('Docker Compose test successful')"
        
        # Clean up
        docker-compose down

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'opencompass:latest'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-entrypoint:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      run: docker build -t opencompass:test .

    - name: Test entrypoint help
      run: |
        output=$(docker run --rm opencompass:test help)
        echo "$output" | grep -q "OpenCompass Docker Container"

    - name: Test entrypoint Python
      run: |
        docker run --rm opencompass:test python -c "print('Python test passed')"

    - name: Test entrypoint bash
      run: |
        docker run --rm opencompass:test bash -c "echo 'Bash test passed'"

    - name: Test volume mounts
      run: |
        mkdir -p test_data test_outputs test_cache
        echo "test data" > test_data/test.txt
        
        docker run --rm \
          -v $(pwd)/test_data:/workspace/data \
          -v $(pwd)/test_outputs:/workspace/outputs \
          -v $(pwd)/test_cache:/workspace/cache \
          opencompass:test python -c "
        import os
        # Check volume mounts
        assert os.path.exists('/workspace/data/test.txt')
        with open('/workspace/data/test.txt', 'r') as f:
            assert f.read().strip() == 'test data'
        # Write output
        with open('/workspace/outputs/result.txt', 'w') as f:
            f.write('output test')
        print('Volume mount test passed')
        "
        
        # Verify output was written
        [ -f test_outputs/result.txt ] && echo "Output file created successfully"
        
        # Clean up
        rm -rf test_data test_outputs test_cache

  lint-dockerfile:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        ignore: DL3008,DL3009,DL3015

    - name: Validate docker-compose.yml
      run: |
        docker-compose config -q || exit 1

  build-size-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and check image size
      run: |
        docker build -t opencompass:size-check .
        
        # Get image size
        size=$(docker image inspect opencompass:size-check --format='{{.Size}}')
        size_mb=$((size / 1024 / 1024))
        
        echo "Docker image size: ${size_mb} MB"
        
        # Warn if image is too large (>5GB)
        if [ $size_mb -gt 5120 ]; then
          echo "::warning::Docker image size (${size_mb} MB) exceeds 5GB"
        fi
        
        # Show detailed size breakdown
        docker history opencompass:size-check --no-trunc --format "table {{.CreatedBy}}\t{{.Size}}"