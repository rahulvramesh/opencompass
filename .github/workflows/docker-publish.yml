name: Docker Build and Publish

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        required: true
        default: 'latest'
      push_to_ghcr:
        description: 'Push to GitHub Container Registry'
        required: true
        default: true
        type: boolean
      push_to_dockerhub:
        description: 'Push to Docker Hub'
        required: false
        default: false
        type: boolean

env:
  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: ${{ github.repository }}
  
  # Docker Hub (optional)
  DOCKERHUB_IMAGE_NAME: opencompass/opencompass

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Log in to GitHub Container Registry
      if: github.event.inputs.push_to_ghcr != 'false' || github.event_name != 'workflow_dispatch'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: github.event.inputs.push_to_dockerhub == 'true' && github.event_name == 'workflow_dispatch'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
          ${{ github.event.inputs.push_to_dockerhub == 'true' && env.DOCKERHUB_IMAGE_NAME || '' }}
        tags: |
          type=ref,event=tag
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=${{ github.event.inputs.tag || 'latest' }}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}},format=short

    - name: Build and push Docker image (CPU)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: runtime
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ github.sha }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

    - name: Update Docker Hub Description
      if: github.event.inputs.push_to_dockerhub == 'true' && github.event_name == 'workflow_dispatch'
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.DOCKERHUB_IMAGE_NAME }}
        readme-filepath: ./docker/README.md

  test-published-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.platform }}

    - name: Test published image
      run: |
        # Extract tag from metadata
        IMAGE="${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${{ github.event.inputs.tag || 'latest' }}"
        
        # Pull and test the image
        docker run --rm --platform ${{ matrix.platform }} $IMAGE help
        docker run --rm --platform ${{ matrix.platform }} $IMAGE python -c "import opencompass; print('Test passed on ${{ matrix.platform }}')"

  create-release-notes:
    if: github.event_name == 'release'
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Docker commands
      run: |
        TAG="${{ github.ref_name }}"
        cat >> release-notes.md << EOF
        
        ## Docker Images
        
        This release is available as Docker images:
        
        ### GitHub Container Registry
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:${TAG}
        docker pull ghcr.io/${{ github.repository }}:latest
        \`\`\`
        
        ### Running the image
        \`\`\`bash
        # Show help
        docker run --rm ghcr.io/${{ github.repository }}:${TAG} help
        
        # Run evaluation
        docker run --rm -v \$(pwd)/data:/workspace/data \\
          ghcr.io/${{ github.repository }}:${TAG} \\
          opencompass configs/eval_demo.py
        
        # Interactive shell
        docker run -it --rm ghcr.io/${{ github.repository }}:${TAG} bash
        \`\`\`
        
        ### Docker Compose
        \`\`\`yaml
        services:
          opencompass:
            image: ghcr.io/${{ github.repository }}:${TAG}
            volumes:
              - ./data:/workspace/data
              - ./outputs:/workspace/outputs
        \`\`\`
        EOF

    - name: Update release
      uses: softprops/action-gh-release@v1
      with:
        append_body: true
        body_path: release-notes.md