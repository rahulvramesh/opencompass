name: PR Docker Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DOCKER_BUILDKIT: 1

jobs:
  quick-test:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'skip-docker-test')
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-pr-buildx-${{ github.event.pull_request.head.sha }}
        restore-keys: |
          ${{ runner.os }}-pr-buildx-
          ${{ runner.os }}-buildx-

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: runtime
        tags: opencompass:pr-test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        load: true

    - name: Basic functionality test
      run: |
        set -e
        
        echo "Testing help command..."
        docker run --rm opencompass:pr-test help
        
        echo "Testing Python import..."
        docker run --rm opencompass:pr-test python -c "
        import opencompass
        from opencompass.registry import MODELS, DATASETS
        print(f'Models: {len(MODELS)}, Datasets: {len(DATASETS)}')
        "
        
        echo "Testing CLI..."
        docker run --rm opencompass:pr-test opencompass --help

    - name: Test with sample config
      run: |
        # Create a minimal test config
        cat > test_config.py << 'EOF'
        from mmengine import read_base
        
        # Test configuration
        datasets = []
        models = []
        EOF
        
        # Test that config can be loaded
        docker run --rm \
          -v $(pwd)/test_config.py:/workspace/test_config.py \
          opencompass:pr-test python -c "
        import sys
        sys.path.insert(0, '/workspace')
        try:
            import test_config
            print('Config loaded successfully')
        except Exception as e:
            print(f'Failed to load config: {e}')
            sys.exit(1)
        "

    - name: Memory usage check
      run: |
        # Check memory usage of the container
        docker run --rm --memory="2g" opencompass:pr-test python -c "
        import psutil
        import os
        
        # Get memory info
        memory = psutil.virtual_memory()
        print(f'Total memory: {memory.total / 1024**3:.2f} GB')
        print(f'Available memory: {memory.available / 1024**3:.2f} GB')
        print(f'Memory usage: {memory.percent}%')
        
        # Check if we can import heavy libraries
        import torch
        print(f'PyTorch version: {torch.__version__}')
        print(f'CUDA available: {torch.cuda.is_available()}')
        "

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Docker Build Status')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const body = `## Docker Build Status ${status}
          
          **Commit:** ${{ github.event.pull_request.head.sha }}
          **Test Result:** ${{ job.status }}
          
          <details>
          <summary>Test Summary</summary>
          
          - Help command: ${status}
          - Python import: ${status}
          - CLI test: ${status}
          - Config loading: ${status}
          - Memory check: ${status}
          
          </details>
          
          To skip Docker tests, add the \`skip-docker-test\` label to this PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }